// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/appointment_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "queue_system/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockAppointmentRepository is a mock of AppointmentRepository interface.
type MockAppointmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAppointmentRepositoryMockRecorder
}

// MockAppointmentRepositoryMockRecorder is the mock recorder for MockAppointmentRepository.
type MockAppointmentRepositoryMockRecorder struct {
	mock *MockAppointmentRepository
}

// NewMockAppointmentRepository creates a new mock instance.
func NewMockAppointmentRepository(ctrl *gomock.Controller) *MockAppointmentRepository {
	mock := &MockAppointmentRepository{ctrl: ctrl}
	mock.recorder = &MockAppointmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppointmentRepository) EXPECT() *MockAppointmentRepositoryMockRecorder {
	return m.recorder
}

// CreateWithTx mocks base method.
func (m *MockAppointmentRepository) CreateWithTx(tx *gorm.DB, appointment *model.Appointment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithTx", tx, appointment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithTx indicates an expected call of CreateWithTx.
func (mr *MockAppointmentRepositoryMockRecorder) CreateWithTx(tx, appointment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithTx", reflect.TypeOf((*MockAppointmentRepository)(nil).CreateWithTx), tx, appointment)
}

// FindConflictingAppointments mocks base method.
func (m *MockAppointmentRepository) FindConflictingAppointments(tx *gorm.DB, appointment *model.Appointment) ([]model.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindConflictingAppointments", tx, appointment)
	ret0, _ := ret[0].([]model.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindConflictingAppointments indicates an expected call of FindConflictingAppointments.
func (mr *MockAppointmentRepositoryMockRecorder) FindConflictingAppointments(tx, appointment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindConflictingAppointments", reflect.TypeOf((*MockAppointmentRepository)(nil).FindConflictingAppointments), tx, appointment)
}

// GetByID mocks base method.
func (m *MockAppointmentRepository) GetByID(id uint) (*model.Appointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*model.Appointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAppointmentRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAppointmentRepository)(nil).GetByID), id)
}
